version: '3'
services:
    db:
        restart: always
        image: postgres
        container_name: postgres
        volumes:
          - ./pgdata:/var/lib/postgresql/data
        ports:
          - "8001:5432"
        networks:
          - backend
        environment:
          - POSTGRES_PASSWORD=postgres
          - POSTGRES_USER=postgres
    user_service:
        build: ./back_go/user_service
        restart: always
        expose:
          - 23002
        ports:
          - "23002:23002"
        networks:
          - backend
        depends_on:
          - db
          - bezbednost
    bezbednost:
        build: ./bezbednost
        restart: always
        expose:
            - 8443
            - 8081
        ports:
            - "8443:8443"
            - "8081:8081"
        networks:
            - backend
        depends_on:
            - db
    #nista-front:
       # build: ./nistagram-front
       # restart: always
        #environment:
       # expose:
       #     - 4200
       # ports:
       #     - "4200:4200"
    gateway:
        image: nginx:1.19.8-alpine
        ports:
          - "9090:9090"
        networks:
          - backend
        volumes:
          - ./back_go/gateway/nginx.conf:/etc/nginx/nginx.conf
          - ./back_go/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
    tracing:
        image: jaegertracing/all-in-one
        container_name: jaeger
        ports:
          - "6831:6831/udp"
          - "6832:6832/udp"
          - "16686:16686"
          - "14268:14268"
          - "14250:14250"
        networks:
          - backend
    admin:
        image: admin:compose_build
        build:
          context: ./back_go/admin
          dockerfile: Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=posts
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - DBHOST=db
          - USER=postgres
          - PASSWORD=postgres
          - DBNAME=admin
          - DBPORT=5432
        expose:
          - 9007
          - 9008
        ports:
          - "9007:9007"
          - "9008:9008"
        networks:
          - backend
        depends_on:
          - db
    search-service:
        image: search:compose_build
        build:
          context: ./back_go/search
          dockerfile: Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=posts
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - DBHOST=db
          - USER=postgres
          - PASSWORD=postgres
          - DBNAME=search
          - DBPORT=5432
        expose:
          - 9000
          - 9001
        ports:
          - "9000:9000"
          - "9001:9001"
        networks:
          - backend
        depends_on:
          - db
    media:
        image: search:compose_build
        build:
          context: ./back_go/media
          dockerfile: Dockerfile
        restart: always
        environment:
          - PORT=9099
        expose:
          - 9099
        ports:
          - "9099:9099"
        networks:
          - backend
    post:
        build:
          context: ./back_go/post
          dockerfile: Dockerfile
        restart: always
        environment:
          - JAEGER_SERVICE_NAME=posts
          - JAEGER_AGENT_HOST=tracing
          - JAEGER_AGENT_PORT=6831
          - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
          - JAEGER_SAMPLER_TYPE=const
          - JAEGER_SAMPLER_PARAM=1
          - DBHOST=db
          - USER=postgres
          - PASSWORD=postgres
          - DBNAME=post
          - DBPORT=5432
        expose:
          - 8000
          - 8090
          - 8080
        ports:
          - "8000:8000"
          - "8090:8090"
          - "8080"
        networks:
          - backend
        depends_on:
          - db
volumes:
    pgdata:
networks:
    backend:
        name: nistagram
        driver: bridge
